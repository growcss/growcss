/**
 * This configuration file defines custom commands for the "rush" command-line.
 * For full documentation, please see https://rushjs.io
 */
{
  "$schema": "https://developer.microsoft.com/json-schemas/rush/v5/command-line.schema.json",

  /**
   * Custom "commands" introduce new verbs for the command-line.  To see the help for these
   * example commands, try "rush --help", "rush my-bulk-command --help", or
   * "rush my-global-command --help".
   */
  "commands": [
    // {
    //   /**
    //    * (Required) Determines the type of custom command.
    //    * Rush's "bulk" commands are invoked separately for each project.  Rush will look in
    //    * each project's package.json file for a "scripts" entry whose name matches the
    //    * command name.  By default, the command will run for every project in the repo,
    //    * according to the dependency graph (similar to how "rush build" works).
    //    * The set of projects can be restricted e.g. using the "--to" or "--from" parameters.
    //    */
    //   "commandKind": "bulk",
    //
    //   /**
    //    * (Required) The name that will be typed as part of the command line.  This is also the name
    //    * of the "scripts" hook in the project's package.json file.
    //    * The name should be comprised of lower case words separated by hyphens.
    //    */
    //   "name": "my-bulk-command",
    //
    //   /**
    //    * (Required) A short summary of the custom command to be shown when printing command line
    //    * help, e.g. "rush --help".
    //    */
    //   "summary": "Example bulk custom command",
    //
    //   /**
    //    * A detailed description of the command to be shown when printing command line
    //    * help (e.g. "rush --help my-command").
    //    * If omitted, the "summary" text will be shown instead.
    //    *
    //    * Whenever you introduce commands/parameters, taking a little time to write meaningful
    //    * documentation can make a big difference for the developer experience in your repo.
    //    */
    //   "description": "This is an example custom command that runs separately for each project",
    //
    //   /**
    //    * By default, Rush operations acquire a lock file which prevents multiple commands from executing simultaneously
    //    * in the same repo folder.  (For example, it would be a mistake to run "rush install" and "rush build" at the
    //    * same time.)  If your command makes sense to run concurrently with other operations,
    //    * set "safeForSimultaneousRushProcesses" to true to disable this protection.
    //    *
    //    * In particular, this is needed for custom scripts that invoke other Rush commands.
    //    */
    //   "safeForSimultaneousRushProcesses": false,
    //
    //   /**
    //    * (Required) If true, then this command is safe to be run in parallel, i.e. executed
    //    * simultaneously for multiple projects.  Similar to "rush build", regardless of parallelism
    //    * projects will not start processing until their dependencies have completed processing.
    //    */
    //   "enableParallelism": false,
    //
    //   /**
    //    * Normally Rush requires that each project's package.json has a "scripts" entry matching
    //    * the custom command name.  To disable this check, set "ignoreMissingScript" to true;
    //    * projects with a missing definition will be skipped.
    //    */
    //   "ignoreMissingScript": false
    // },
    //
    // {
    //   /**
    //    * (Required) Determines the type of custom command.
    //    * Rush's "global" commands are invoked once for the entire repo.
    //    */
    //   "commandKind": "global",
    //
    //   "name": "my-global-command",
    //   "summary": "Example global custom command",
    //   "description": "This is an example custom command that runs once for the entire repo",
    //
    //   "safeForSimultaneousRushProcesses": false,
    //
    //   /**
    //    * A script that will be invoked using the OS shell. The working directory will be the folder
    //    * that contains rush.json.  If custom parameters are associated with this command, their
    //    * values will be appended to the end of this string.
    //    */
    //   "shellCommand": "node common/scripts/my-global-command.js"
    // }
    {
      "name": "lint",
      "summary": "Runs prettier and eslint.",
      "commandKind": "bulk",
      "description": "Runs prettier and eslint for each of the packages that have a code-style task.",
      "enableParallelism": false,
      "ignoreMissingScript": true
    },
    {
      "name": "lint-fix",
      "summary": "Runs prettier and eslint with --fix setting.",
      "commandKind": "bulk",
      "description": "Runs prettier and eslint with --fix setting for each of the packages that have a code-style task.",
      "enableParallelism": false,
      "ignoreMissingScript": true
    },
    {
      "name": "sort",
      "summary": "Run package.json sorting.",
      "commandKind": "bulk",
      "description": "Runs package.json sorting for each packages that has a sort task.",
      "enableParallelism": true,
      "ignoreMissingScript": true
    },
    {
      "name": "test",
      "summary": "Run jest tests.",
      "commandKind": "bulk",
      "description": "Runs jest for each of the packages that has a test task.",
      "enableParallelism": true,
      "ignoreMissingScript": true
    },
    {
      "name": "test-ci",
      "summary": "Run jest tests for ci.",
      "commandKind": "bulk",
      "description": "Runs jest for each of the packages that has a test task.",
      "enableParallelism": true,
      "ignoreMissingScript": true
    },
    {
      "name": "test-coverage",
      "summary": "Run jest tests with coverage.",
      "commandKind": "bulk",
      "description": "Runs jest with coverage for each of the packages that has a test task.",
      "enableParallelism": true,
      "ignoreMissingScript": true
    },
    {
      "name": "test-ci-coverage",
      "summary": "Run jest tests with coverage for ci.",
      "commandKind": "bulk",
      "description": "Runs jest with coverage for each of the packages that has a test task.",
      "enableParallelism": true,
      "ignoreMissingScript": true
    },
    {
      "name": "test-snapshot-update",
      "summary": "Run jest tests with update snapshot option.",
      "commandKind": "bulk",
      "description": "Runs jest with snapshot update for each of the packages that has a test task.",
      "enableParallelism": true,
      "ignoreMissingScript": true
    },
    {
      "name": "clear",
      "summary": "Clears the dist folder in each package.",
      "commandKind": "bulk",
      "description": "Runs clear for each of the packages that has a clear task.",
      "enableParallelism": true,
      "ignoreMissingScript": true
    },
    // global commands
    {
      "commandKind": "global",
      "name": "storybook",
      "summary": "Start storybook.",
      "description": "Run this command to start storybook",
      "shellCommand": "cd ./build/storybook && npm run storybook"
    },{
      "commandKind": "global",
      "name": "kill-storybook",
      "summary": "Kill running storybook.",
      "description": "Run this command to kill a running storybook",
      "shellCommand": "(lsof -t -i:9001 | xargs kill)"
    },
    {
      "commandKind": "global",
      "name": "storybook-build",
      "summary": "Build storybook.",
      "description": "Run this command to build storybook",
      "shellCommand": "cd ./build/storybook && npm run storybook:build"
    },
    {
      "commandKind": "global",
      "name": "plop",
      "summary": "Create a new package.",
      "description": "Run this command to create a new package",
      "shellCommand": "cd ./build/scripts && npm run plop"
    }
  ],

  /**
   * Custom "parameters" introduce new parameters for specified Rush command-line commands.
   * For example, you might define a "--production" parameter for the "rush build" command.
   */
  "parameters": [
    // {
    //   /**
    //    * (Required) Determines the type of custom parameter.
    //    * A "flag" is a custom command-line parameter whose presence acts as an on/off switch.
    //    */
    //   "parameterKind": "flag",
    //
    //   /**
    //    * (Required) The long name of the parameter.  It must be lower-case and use dash delimiters.
    //    */
    //   "longName": "--my-flag",
    //
    //   /**
    //    * An optional alternative short name for the parameter.  It must be a dash followed by a single
    //    * lower-case or upper-case letter, which is case-sensitive.
    //    *
    //    * NOTE: The Rush developers recommend that automation scripts should always use the long name
    //    * to improve readability.  The short name is only intended as a convenience for humans.
    //    * The alphabet letters run out quickly, and are difficult to memorize, so *only* use
    //    * a short name if you expect the parameter to be needed very often in everyday operations.
    //    */
    //   "shortName": "-m",
    //
    //   /**
    //    * (Required) A long description to be shown in the command-line help.
    //    *
    //    * Whenever you introduce commands/parameters, taking a little time to write meaningful
    //    * documentation can make a big difference for the developer experience in your repo.
    //    */
    //   "description": "A custom flag parameter that is passed to the scripts that are invoked when building projects",
    //
    //   /**
    //    * (Required) A list of custom commands and/or built-in Rush commands that this parameter may
    //    * be used with.  The parameter will be appended to the shell command that Rush invokes.
    //    */
    //    "associatedCommands": [ "build", "rebuild" ]
    // },
    // {
    //   /**
    //    * (Required) Determines the type of custom parameter.
    //    * A "flag" is a custom command-line parameter whose presence acts as an on/off switch.
    //    */
    //   "parameterKind": "choice",
    //   "longName": "--my-choice",
    //   "description": "A custom choice parameter for the \"my-global-command\" custom command",
    //
    //   "associatedCommands": [ "my-global-command" ],
    //
    //   /**
    //    * Normally if a parameter is omitted from the command line, it will not be passed
    //    * to the shell command. this value will be inserted by default.  Whereas if a "defaultValue"
    //    * is defined, the parameter will always be passed to the shell command, and will use the
    //    * default value if unspecified.  The value must be one of the defined alternatives.
    //    */
    //   "defaultValue": "vanilla",
    //
    //   /**
    //    * (Required) A list of alternative argument values that can be chosen for this parameter.
    //    */
    //   "alternatives": [
    //     {
    //       /**
    //        * A token that is one of the alternatives that can be used with the choice parameter,
    //        * e.g. "vanilla" in "--flavor vanilla".
    //        */
    //       "name": "vanilla",
    //
    //       /**
    //        * A detailed description for the alternative that can be shown in the command-line help.
    //        *
    //        * Whenever you introduce commands/parameters, taking a little time to write meaningful
    //        * documentation can make a big difference for the developer experience in your repo.
    //        */
    //       "description": "Use the vanilla flavor (the default)"
    //     },
    //
    //     {
    //       "name": "chocolate",
    //       "description": "Use the chocolate flavor"
    //     },
    //
    //     {
    //       "name": "strawberry",
    //       "description": "Use the strawberry flavor"
    //     }
    //   ]
    // }
    {
      "longName": "--production",
      "parameterKind": "flag",
      "description": "Perform a production build, including minification step",
      "associatedCommands": [
        "build",
        "rebuild"
      ]
    }
  ]
}
